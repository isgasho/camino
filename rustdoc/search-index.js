var searchIndex = JSON.parse('{\
"camino":{"doc":"UTF-8 encoded paths.","i":[[3,"Utf8PathBuf","camino","An owned, mutable UTF-8 path (akin to [<code>String</code>]).",null,null],[11,"new","","Allocates an empty <code>Utf8PathBuf</code>.",0,[[],["utf8pathbuf",3]]],[11,"from_path_buf","","Creates a new <code>Utf8PathBuf</code> from a <code>PathBuf</code> containing valid …",0,[[["pathbuf",3]],[["result",4],["utf8pathbuf",3],["pathbuf",3]]]],[11,"with_capacity","","Creates a new <code>Utf8PathBuf</code> with a given capacity used to …",0,[[],["utf8pathbuf",3]]],[11,"as_path","","Coerces to a [<code>Utf8Path</code>] slice.",0,[[],["utf8path",3]]],[11,"push","","Extends <code>self</code> with <code>path</code>.",0,[[]]],[11,"pop","","Truncates <code>self</code> to <code>self.parent</code>.",0,[[]]],[11,"set_file_name","","Updates <code>self.file_name</code> to <code>file_name</code>.",0,[[]]],[11,"set_extension","","Updates <code>self.extension</code> to <code>extension</code>.",0,[[]]],[11,"into_string","","Consumes the <code>Utf8PathBuf</code>, yielding its internal [<code>String</code>] …",0,[[],["string",3]]],[11,"into_os_string","","Consumes the <code>Utf8PathBuf</code>, yielding its internal [<code>OsString</code>]…",0,[[],["osstring",3]]],[11,"into_boxed_path","","Converts this <code>Utf8PathBuf</code> into a boxed [<code>Utf8Path</code>].",0,[[],[["box",3],["utf8path",3]]]],[11,"capacity","","Invokes <code>capacity</code> on the underlying instance of [<code>PathBuf</code>].",0,[[]]],[11,"clear","","Invokes <code>clear</code> on the underlying instance of [<code>PathBuf</code>].",0,[[]]],[11,"reserve","","Invokes <code>reserve</code> on the underlying instance of [<code>PathBuf</code>].",0,[[]]],[11,"reserve_exact","","Invokes <code>reserve_exact</code> on the underlying instance of […",0,[[]]],[11,"shrink_to_fit","","Invokes <code>shrink_to_fit</code> on the underlying instance of […",0,[[]]],[3,"Utf8Path","","A slice of a UTF-8 path (akin to [<code>str</code>]).",null,null],[11,"new","","Directly wraps a string slice as a <code>Utf8Path</code> slice.",1,[[],["utf8path",3]]],[11,"from_path","","Converts a [<code>Path</code>] to a <code>Utf8Path</code>.",1,[[["path",3]],[["utf8path",3],["option",4]]]],[11,"as_str","","Yields the underlying <code>str</code> slice.",1,[[]]],[11,"as_os_str","","Yields the underlying [<code>OsStr</code>] slice.",1,[[],["osstr",3]]],[11,"to_path_buf","","Converts a <code>Utf8Path</code> to an owned [<code>Utf8PathBuf</code>].",1,[[],["utf8pathbuf",3]]],[11,"is_absolute","","Returns <code>true</code> if the <code>Utf8Path</code> is absolute, i.e., if it is …",1,[[]]],[11,"is_relative","","Returns <code>true</code> if the <code>Utf8Path</code> is relative, i.e., not …",1,[[]]],[11,"has_root","","Returns <code>true</code> if the <code>Utf8Path</code> has a root.",1,[[]]],[11,"parent","","Returns the <code>Path</code> without its final component, if there is …",1,[[],[["utf8path",3],["option",4]]]],[11,"ancestors","","Produces an iterator over <code>Utf8Path</code> and its ancestors.",1,[[],["utf8ancestors",3]]],[11,"file_name","","Returns the final component of the <code>Utf8Path</code>, if there is …",1,[[],["option",4]]],[11,"strip_prefix","","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.",1,[[],[["result",4],["utf8path",3],["stripprefixerror",3]]]],[11,"starts_with","","Determines whether <code>base</code> is a prefix of <code>self</code>.",1,[[]]],[11,"ends_with","","Determines whether <code>child</code> is a suffix of <code>self</code>.",1,[[]]],[11,"file_stem","","Extracts the stem (non-extension) portion of …",1,[[],["option",4]]],[11,"extension","","Extracts the extension of <code>self.file_name</code>, if possible.",1,[[],["option",4]]],[11,"join","","Creates an owned [<code>Utf8PathBuf</code>] with <code>path</code> adjoined to <code>self</code>.",1,[[],["utf8pathbuf",3]]],[11,"join_os","","Creates an owned [<code>PathBuf</code>] with <code>path</code> adjoined to <code>self</code>.",1,[[],["pathbuf",3]]],[11,"with_file_name","","Creates an owned [<code>Utf8PathBuf</code>] like <code>self</code> but with the …",1,[[],["utf8pathbuf",3]]],[11,"with_extension","","Creates an owned [<code>Utf8PathBuf</code>] like <code>self</code> but with the …",1,[[],["utf8pathbuf",3]]],[11,"components","","Produces an iterator over the [<code>Utf8Component</code>]s of the …",1,[[],["utf8components",3]]],[11,"iter","","Produces an iterator over the path\'s components viewed as …",1,[[],["iter",3]]],[11,"metadata","","Queries the file system to get information about a file, …",1,[[],[["metadata",3],["result",6]]]],[11,"symlink_metadata","","Queries the metadata about a file without following …",1,[[],[["metadata",3],["result",6]]]],[11,"canonicalize","","Returns the canonical, absolute form of the path with all …",1,[[],[["result",6],["pathbuf",3]]]],[11,"read_link","","Reads a symbolic link, returning the file that the link …",1,[[],[["result",6],["pathbuf",3]]]],[11,"read_dir","","Returns an iterator over the entries within a directory.",1,[[],[["readdir",3],["result",6]]]],[11,"exists","","Returns <code>true</code> if the path points at an existing entity.",1,[[]]],[11,"is_file","","Returns <code>true</code> if the path exists on disk and is pointing …",1,[[]]],[11,"is_dir","","Returns <code>true</code> if the path exists on disk and is pointing …",1,[[]]],[11,"into_path_buf","","Converts a <code>Box<Utf8Path></code> into a [<code>Utf8PathBuf</code>] without …",1,[[["box",3],["utf8path",3]],["utf8pathbuf",3]]],[3,"Utf8Ancestors","","",null,null],[3,"Utf8Components","","An iterator over the [<code>Utf8Component</code>]s of a [<code>Utf8Path</code>].",null,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path …",2,[[],["utf8path",3]]],[3,"Iter","","An iterator over the [<code>Utf8Component</code>]s of a [<code>Utf8Path</code>], as …",null,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path …",3,[[],["utf8path",3]]],[4,"Utf8Component","","",null,null],[13,"Prefix","","",4,null],[13,"RootDir","","",4,null],[13,"CurDir","","",4,null],[13,"ParentDir","","",4,null],[13,"Normal","","",4,null],[11,"as_str","","Extracts the underlying [<code>str</code>] slice.",4,[[]]],[11,"as_os_str","","Extracts the underlying [<code>OsStr</code>] slice.",4,[[],["osstr",3]]],[3,"Utf8PrefixComponent","","",null,null],[11,"as_str","","",5,[[]]],[11,"as_os_str","","",5,[[],["osstr",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"as_ref","","",3,[[],["utf8path",3]]],[11,"as_ref","","",3,[[],["path",3]]],[11,"as_ref","","",3,[[],["osstr",3]]],[11,"as_ref","","",1,[[],["utf8path",3]]],[11,"as_ref","","",0,[[],["utf8path",3]]],[11,"as_ref","","",1,[[],["path",3]]],[11,"as_ref","","",0,[[],["path",3]]],[11,"as_ref","","",1,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",1,[[],["osstr",3]]],[11,"as_ref","","",0,[[],["osstr",3]]],[11,"from","","",0,[[["string",3]],["utf8pathbuf",3]]],[11,"from","","",0,[[],["utf8pathbuf",3]]],[11,"from","","",0,[[["box",3],["utf8path",3]],["utf8pathbuf",3]]],[11,"from","","",0,[[["cow",4],["utf8path",3]],["utf8pathbuf",3]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"extend","","",0,[[["intoiterator",8]]]],[11,"next","","",6,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"clone","","",0,[[],["utf8pathbuf",3]]],[11,"clone","","",6,[[],["utf8ancestors",3]]],[11,"clone","","",2,[[],["utf8components",3]]],[11,"clone","","",3,[[],["iter",3]]],[11,"clone","","",4,[[],["utf8component",4]]],[11,"clone","","",5,[[],["utf8prefixcomponent",3]]],[11,"default","","",0,[[],["utf8pathbuf",3]]],[11,"cmp","","",2,[[["utf8components",3]],["ordering",4]]],[11,"cmp","","",4,[[["utf8component",4]],["ordering",4]]],[11,"cmp","","",5,[[["utf8prefixcomponent",3]],["ordering",4]]],[11,"eq","","",2,[[["utf8components",3]]]],[11,"ne","","",2,[[["utf8components",3]]]],[11,"eq","","",4,[[["utf8component",4]]]],[11,"ne","","",4,[[["utf8component",4]]]],[11,"eq","","",5,[[["utf8prefixcomponent",3]]]],[11,"ne","","",5,[[["utf8prefixcomponent",3]]]],[11,"eq","","",0,[[["utf8pathbuf",3]]]],[11,"eq","","",1,[[["utf8path",3]]]],[11,"eq","","",0,[[["utf8path",3]]]],[11,"eq","","",1,[[["utf8pathbuf",3]]]],[11,"eq","","",0,[[["utf8path",3]]]],[11,"eq","","",1,[[["cow",4]]]],[11,"eq","","",0,[[["cow",4]]]],[11,"partial_cmp","","",2,[[["utf8components",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["utf8components",3]]]],[11,"le","","",2,[[["utf8components",3]]]],[11,"gt","","",2,[[["utf8components",3]]]],[11,"ge","","",2,[[["utf8components",3]]]],[11,"partial_cmp","","",4,[[["utf8component",4]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["utf8component",4]]]],[11,"le","","",4,[[["utf8component",4]]]],[11,"gt","","",4,[[["utf8component",4]]]],[11,"ge","","",4,[[["utf8component",4]]]],[11,"partial_cmp","","",5,[[["utf8prefixcomponent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["utf8prefixcomponent",3]]]],[11,"le","","",5,[[["utf8prefixcomponent",3]]]],[11,"gt","","",5,[[["utf8prefixcomponent",3]]]],[11,"ge","","",5,[[["utf8prefixcomponent",3]]]],[11,"partial_cmp","","",1,[[["utf8path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["utf8path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["utf8pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["utf8path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"to_owned","","",1,[[],["utf8pathbuf",3]]],[11,"deref","","",0,[[],["utf8path",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"borrow","","",0,[[],["utf8path",3]]],[11,"from_iter","","",0,[[["intoiterator",8]],["utf8pathbuf",3]]]],"p":[[3,"Utf8PathBuf"],[3,"Utf8Path"],[3,"Utf8Components"],[3,"Iter"],[4,"Utf8Component"],[3,"Utf8PrefixComponent"],[3,"Utf8Ancestors"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);